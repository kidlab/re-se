#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTree.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FTree")]
	public partial class FTreeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBIRTHPLACE(BIRTHPLACE instance);
    partial void UpdateBIRTHPLACE(BIRTHPLACE instance);
    partial void DeleteBIRTHPLACE(BIRTHPLACE instance);
    partial void InsertRELATIONSHIP(RELATIONSHIP instance);
    partial void UpdateRELATIONSHIP(RELATIONSHIP instance);
    partial void DeleteRELATIONSHIP(RELATIONSHIP instance);
    partial void InsertBURYPLACE(BURYPLACE instance);
    partial void UpdateBURYPLACE(BURYPLACE instance);
    partial void DeleteBURYPLACE(BURYPLACE instance);
    partial void InsertBURYREASON(BURYREASON instance);
    partial void UpdateBURYREASON(BURYREASON instance);
    partial void DeleteBURYREASON(BURYREASON instance);
    partial void InsertEVENT(EVENT instance);
    partial void UpdateEVENT(EVENT instance);
    partial void DeleteEVENT(EVENT instance);
    partial void InsertFAMILY(FAMILY instance);
    partial void UpdateFAMILY(FAMILY instance);
    partial void DeleteFAMILY(FAMILY instance);
    partial void InsertFamilyMember_Test(FamilyMember_Test instance);
    partial void UpdateFamilyMember_Test(FamilyMember_Test instance);
    partial void DeleteFamilyMember_Test(FamilyMember_Test instance);
    partial void InsertJOB(JOB instance);
    partial void UpdateJOB(JOB instance);
    partial void DeleteJOB(JOB instance);
    partial void InsertMEMBER(MEMBER instance);
    partial void UpdateMEMBER(MEMBER instance);
    partial void DeleteMEMBER(MEMBER instance);
    partial void InsertRELATIONSHIP_TYPE(RELATIONSHIP_TYPE instance);
    partial void UpdateRELATIONSHIP_TYPE(RELATIONSHIP_TYPE instance);
    partial void DeleteRELATIONSHIP_TYPE(RELATIONSHIP_TYPE instance);
    #endregion
		
		public FTreeDataContext() : 
				base(global::FTree.Model.Properties.Settings.Default.FTreeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FTreeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FTreeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FTreeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FTreeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BIRTHPLACE> BIRTHPLACEs
		{
			get
			{
				return this.GetTable<BIRTHPLACE>();
			}
		}
		
		public System.Data.Linq.Table<RELATIONSHIP> RELATIONSHIPs
		{
			get
			{
				return this.GetTable<RELATIONSHIP>();
			}
		}
		
		public System.Data.Linq.Table<BURYPLACE> BURYPLACEs
		{
			get
			{
				return this.GetTable<BURYPLACE>();
			}
		}
		
		public System.Data.Linq.Table<BURYREASON> BURYREASONs
		{
			get
			{
				return this.GetTable<BURYREASON>();
			}
		}
		
		public System.Data.Linq.Table<EVENT> EVENTs
		{
			get
			{
				return this.GetTable<EVENT>();
			}
		}
		
		public System.Data.Linq.Table<FAMILY> FAMILies
		{
			get
			{
				return this.GetTable<FAMILY>();
			}
		}
		
		public System.Data.Linq.Table<FamilyMember_Test> FamilyMember_Tests
		{
			get
			{
				return this.GetTable<FamilyMember_Test>();
			}
		}
		
		public System.Data.Linq.Table<JOB> JOBs
		{
			get
			{
				return this.GetTable<JOB>();
			}
		}
		
		public System.Data.Linq.Table<MEMBER> MEMBERs
		{
			get
			{
				return this.GetTable<MEMBER>();
			}
		}
		
		public System.Data.Linq.Table<MEMBER_EVENT> MEMBER_EVENTs
		{
			get
			{
				return this.GetTable<MEMBER_EVENT>();
			}
		}
		
		public System.Data.Linq.Table<RELATIONSHIP_TYPE> RELATIONSHIP_TYPEs
		{
			get
			{
				return this.GetTable<RELATIONSHIP_TYPE>();
			}
		}
	}
	
	[Table(Name="dbo.BIRTHPLACE")]
	public partial class BIRTHPLACE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBirthPlace;
		
		private string _Name;
		
		private EntitySet<MEMBER> _MEMBERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBirthPlaceChanging(int value);
    partial void OnIDBirthPlaceChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BIRTHPLACE()
		{
			this._MEMBERs = new EntitySet<MEMBER>(new Action<MEMBER>(this.attach_MEMBERs), new Action<MEMBER>(this.detach_MEMBERs));
			OnCreated();
		}
		
		[Column(Storage="_IDBirthPlace", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDBirthPlace
		{
			get
			{
				return this._IDBirthPlace;
			}
			set
			{
				if ((this._IDBirthPlace != value))
				{
					this.OnIDBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._IDBirthPlace = value;
					this.SendPropertyChanged("IDBirthPlace");
					this.OnIDBirthPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="BIRTHPLACE_MEMBER", Storage="_MEMBERs", ThisKey="IDBirthPlace", OtherKey="IDBirthplace")]
		public EntitySet<MEMBER> MEMBERs
		{
			get
			{
				return this._MEMBERs;
			}
			set
			{
				this._MEMBERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.BIRTHPLACE = this;
		}
		
		private void detach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.BIRTHPLACE = null;
		}
	}
	
	[Table(Name="dbo.RELATIONSHIP")]
	public partial class RELATIONSHIP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMember1;
		
		private int _IDMember2;
		
		private int _IDRelationship;
		
		private EntityRef<MEMBER> _MEMBER;
		
		private EntityRef<MEMBER> _MEMBER1;
		
		private EntityRef<RELATIONSHIP_TYPE> _RELATIONSHIP_TYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMember1Changing(int value);
    partial void OnIDMember1Changed();
    partial void OnIDMember2Changing(int value);
    partial void OnIDMember2Changed();
    partial void OnIDRelationshipChanging(int value);
    partial void OnIDRelationshipChanged();
    #endregion
		
		public RELATIONSHIP()
		{
			this._MEMBER = default(EntityRef<MEMBER>);
			this._MEMBER1 = default(EntityRef<MEMBER>);
			this._RELATIONSHIP_TYPE = default(EntityRef<RELATIONSHIP_TYPE>);
			OnCreated();
		}
		
		[Column(Storage="_IDMember1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDMember1
		{
			get
			{
				return this._IDMember1;
			}
			set
			{
				if ((this._IDMember1 != value))
				{
					if (this._MEMBER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMember1Changing(value);
					this.SendPropertyChanging();
					this._IDMember1 = value;
					this.SendPropertyChanged("IDMember1");
					this.OnIDMember1Changed();
				}
			}
		}
		
		[Column(Storage="_IDMember2", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDMember2
		{
			get
			{
				return this._IDMember2;
			}
			set
			{
				if ((this._IDMember2 != value))
				{
					if (this._MEMBER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMember2Changing(value);
					this.SendPropertyChanging();
					this._IDMember2 = value;
					this.SendPropertyChanged("IDMember2");
					this.OnIDMember2Changed();
				}
			}
		}
		
		[Column(Storage="_IDRelationship", DbType="Int NOT NULL")]
		public int IDRelationship
		{
			get
			{
				return this._IDRelationship;
			}
			set
			{
				if ((this._IDRelationship != value))
				{
					if (this._RELATIONSHIP_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRelationshipChanging(value);
					this.SendPropertyChanging();
					this._IDRelationship = value;
					this.SendPropertyChanged("IDRelationship");
					this.OnIDRelationshipChanged();
				}
			}
		}
		
		[Association(Name="MEMBER_RELATIONSHIP", Storage="_MEMBER", ThisKey="IDMember1", OtherKey="IDMember", IsForeignKey=true)]
		public MEMBER MEMBER
		{
			get
			{
				return this._MEMBER.Entity;
			}
			set
			{
				MEMBER previousValue = this._MEMBER.Entity;
				if (((previousValue != value) 
							|| (this._MEMBER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEMBER.Entity = null;
						previousValue.RELATIONSHIPs.Remove(this);
					}
					this._MEMBER.Entity = value;
					if ((value != null))
					{
						value.RELATIONSHIPs.Add(this);
						this._IDMember1 = value.IDMember;
					}
					else
					{
						this._IDMember1 = default(int);
					}
					this.SendPropertyChanged("MEMBER");
				}
			}
		}
		
		[Association(Name="MEMBER_RELATIONSHIP1", Storage="_MEMBER1", ThisKey="IDMember2", OtherKey="IDMember", IsForeignKey=true)]
		public MEMBER MEMBER1
		{
			get
			{
				return this._MEMBER1.Entity;
			}
			set
			{
				MEMBER previousValue = this._MEMBER1.Entity;
				if (((previousValue != value) 
							|| (this._MEMBER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEMBER1.Entity = null;
						previousValue.RELATIONSHIPs1.Remove(this);
					}
					this._MEMBER1.Entity = value;
					if ((value != null))
					{
						value.RELATIONSHIPs1.Add(this);
						this._IDMember2 = value.IDMember;
					}
					else
					{
						this._IDMember2 = default(int);
					}
					this.SendPropertyChanged("MEMBER1");
				}
			}
		}
		
		[Association(Name="RELATIONSHIP_TYPE_RELATIONSHIP", Storage="_RELATIONSHIP_TYPE", ThisKey="IDRelationship", OtherKey="IDRelationship", IsForeignKey=true)]
		public RELATIONSHIP_TYPE RELATIONSHIP_TYPE
		{
			get
			{
				return this._RELATIONSHIP_TYPE.Entity;
			}
			set
			{
				RELATIONSHIP_TYPE previousValue = this._RELATIONSHIP_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._RELATIONSHIP_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RELATIONSHIP_TYPE.Entity = null;
						previousValue.RELATIONSHIPs.Remove(this);
					}
					this._RELATIONSHIP_TYPE.Entity = value;
					if ((value != null))
					{
						value.RELATIONSHIPs.Add(this);
						this._IDRelationship = value.IDRelationship;
					}
					else
					{
						this._IDRelationship = default(int);
					}
					this.SendPropertyChanged("RELATIONSHIP_TYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BURYPLACE")]
	public partial class BURYPLACE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBuryPlace;
		
		private string _Name;
		
		private EntitySet<MEMBER> _MEMBERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBuryPlaceChanging(int value);
    partial void OnIDBuryPlaceChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BURYPLACE()
		{
			this._MEMBERs = new EntitySet<MEMBER>(new Action<MEMBER>(this.attach_MEMBERs), new Action<MEMBER>(this.detach_MEMBERs));
			OnCreated();
		}
		
		[Column(Storage="_IDBuryPlace", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDBuryPlace
		{
			get
			{
				return this._IDBuryPlace;
			}
			set
			{
				if ((this._IDBuryPlace != value))
				{
					this.OnIDBuryPlaceChanging(value);
					this.SendPropertyChanging();
					this._IDBuryPlace = value;
					this.SendPropertyChanged("IDBuryPlace");
					this.OnIDBuryPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="BURYPLACE_MEMBER", Storage="_MEMBERs", ThisKey="IDBuryPlace", OtherKey="IDBuryPlace")]
		public EntitySet<MEMBER> MEMBERs
		{
			get
			{
				return this._MEMBERs;
			}
			set
			{
				this._MEMBERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.BURYPLACE = this;
		}
		
		private void detach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.BURYPLACE = null;
		}
	}
	
	[Table(Name="dbo.BURYREASON")]
	public partial class BURYREASON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBuryReason;
		
		private string _Name;
		
		private EntitySet<MEMBER> _MEMBERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBuryReasonChanging(int value);
    partial void OnIDBuryReasonChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BURYREASON()
		{
			this._MEMBERs = new EntitySet<MEMBER>(new Action<MEMBER>(this.attach_MEMBERs), new Action<MEMBER>(this.detach_MEMBERs));
			OnCreated();
		}
		
		[Column(Storage="_IDBuryReason", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDBuryReason
		{
			get
			{
				return this._IDBuryReason;
			}
			set
			{
				if ((this._IDBuryReason != value))
				{
					this.OnIDBuryReasonChanging(value);
					this.SendPropertyChanging();
					this._IDBuryReason = value;
					this.SendPropertyChanged("IDBuryReason");
					this.OnIDBuryReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="BURYREASON_MEMBER", Storage="_MEMBERs", ThisKey="IDBuryReason", OtherKey="IDBuryReason")]
		public EntitySet<MEMBER> MEMBERs
		{
			get
			{
				return this._MEMBERs;
			}
			set
			{
				this._MEMBERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.BURYREASON = this;
		}
		
		private void detach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.BURYREASON = null;
		}
	}
	
	[Table(Name="dbo.EVENT")]
	public partial class EVENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDAchievement;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAchievementChanging(int value);
    partial void OnIDAchievementChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EVENT()
		{
			OnCreated();
		}
		
		[Column(Storage="_IDAchievement", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDAchievement
		{
			get
			{
				return this._IDAchievement;
			}
			set
			{
				if ((this._IDAchievement != value))
				{
					this.OnIDAchievementChanging(value);
					this.SendPropertyChanging();
					this._IDAchievement = value;
					this.SendPropertyChanged("IDAchievement");
					this.OnIDAchievementChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FAMILY")]
	public partial class FAMILY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDFamily;
		
		private string _Name;
		
		private EntitySet<MEMBER> _MEMBERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDFamilyChanging(int value);
    partial void OnIDFamilyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FAMILY()
		{
			this._MEMBERs = new EntitySet<MEMBER>(new Action<MEMBER>(this.attach_MEMBERs), new Action<MEMBER>(this.detach_MEMBERs));
			OnCreated();
		}
		
		[Column(Storage="_IDFamily", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDFamily
		{
			get
			{
				return this._IDFamily;
			}
			set
			{
				if ((this._IDFamily != value))
				{
					this.OnIDFamilyChanging(value);
					this.SendPropertyChanging();
					this._IDFamily = value;
					this.SendPropertyChanged("IDFamily");
					this.OnIDFamilyChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FAMILY_MEMBER", Storage="_MEMBERs", ThisKey="IDFamily", OtherKey="IDFamily")]
		public EntitySet<MEMBER> MEMBERs
		{
			get
			{
				return this._MEMBERs;
			}
			set
			{
				this._MEMBERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.FAMILY = this;
		}
		
		private void detach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.FAMILY = null;
		}
	}
	
	[Table(Name="dbo.FamilyMember_Test")]
	public partial class FamilyMember_Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private byte _Gender;
		
		private string _HomeTown;
		
		private string _Address;
		
		private System.Nullable<System.DateTime> _BirthDay;
		
		private System.Nullable<System.DateTime> _DayJoinFamily;
		
		private string _Career;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(byte value);
    partial void OnGenderChanged();
    partial void OnHomeTownChanging(string value);
    partial void OnHomeTownChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnBirthDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDayChanged();
    partial void OnDayJoinFamilyChanging(System.Nullable<System.DateTime> value);
    partial void OnDayJoinFamilyChanged();
    partial void OnCareerChanging(string value);
    partial void OnCareerChanged();
    #endregion
		
		public FamilyMember_Test()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="TinyInt NOT NULL")]
		public byte Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_HomeTown", DbType="NVarChar(50)")]
		public string HomeTown
		{
			get
			{
				return this._HomeTown;
			}
			set
			{
				if ((this._HomeTown != value))
				{
					this.OnHomeTownChanging(value);
					this.SendPropertyChanging();
					this._HomeTown = value;
					this.SendPropertyChanged("HomeTown");
					this.OnHomeTownChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[Column(Storage="_DayJoinFamily", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayJoinFamily
		{
			get
			{
				return this._DayJoinFamily;
			}
			set
			{
				if ((this._DayJoinFamily != value))
				{
					this.OnDayJoinFamilyChanging(value);
					this.SendPropertyChanging();
					this._DayJoinFamily = value;
					this.SendPropertyChanged("DayJoinFamily");
					this.OnDayJoinFamilyChanged();
				}
			}
		}
		
		[Column(Storage="_Career", DbType="NVarChar(50)")]
		public string Career
		{
			get
			{
				return this._Career;
			}
			set
			{
				if ((this._Career != value))
				{
					this.OnCareerChanging(value);
					this.SendPropertyChanging();
					this._Career = value;
					this.SendPropertyChanged("Career");
					this.OnCareerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.JOB")]
	public partial class JOB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDJob;
		
		private string _Name;
		
		private EntitySet<MEMBER> _MEMBERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDJobChanging(int value);
    partial void OnIDJobChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public JOB()
		{
			this._MEMBERs = new EntitySet<MEMBER>(new Action<MEMBER>(this.attach_MEMBERs), new Action<MEMBER>(this.detach_MEMBERs));
			OnCreated();
		}
		
		[Column(Storage="_IDJob", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDJob
		{
			get
			{
				return this._IDJob;
			}
			set
			{
				if ((this._IDJob != value))
				{
					this.OnIDJobChanging(value);
					this.SendPropertyChanging();
					this._IDJob = value;
					this.SendPropertyChanged("IDJob");
					this.OnIDJobChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="JOB_MEMBER", Storage="_MEMBERs", ThisKey="IDJob", OtherKey="IDJob")]
		public EntitySet<MEMBER> MEMBERs
		{
			get
			{
				return this._MEMBERs;
			}
			set
			{
				this._MEMBERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.JOB = this;
		}
		
		private void detach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.JOB = null;
		}
	}
	
	[Table(Name="dbo.MEMBER")]
	public partial class MEMBER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMember;
		
		private int _IDFamily;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<byte> _Gender;
		
		private System.Nullable<int> _IDBirthplace;
		
		private System.Nullable<int> _IDJob;
		
		private string _Address;
		
		private System.Nullable<System.DateTime> _BuryDay;
		
		private System.Nullable<int> _IDBuryReason;
		
		private System.Nullable<int> _IDBuryPlace;
		
		private System.Nullable<int> _IDFather;
		
		private System.Nullable<int> _IDMother;
		
		private System.Nullable<int> _IDHusband;
		
		private System.Nullable<int> _IDWife;
		
		private System.Nullable<int> _GenLevel;
		
		private EntitySet<RELATIONSHIP> _RELATIONSHIPs;
		
		private EntitySet<RELATIONSHIP> _RELATIONSHIPs1;
		
		private EntityRef<BIRTHPLACE> _BIRTHPLACE;
		
		private EntityRef<BURYPLACE> _BURYPLACE;
		
		private EntityRef<BURYREASON> _BURYREASON;
		
		private EntityRef<FAMILY> _FAMILY;
		
		private EntityRef<JOB> _JOB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMemberChanging(int value);
    partial void OnIDMemberChanged();
    partial void OnIDFamilyChanging(int value);
    partial void OnIDFamilyChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnGenderChanging(System.Nullable<byte> value);
    partial void OnGenderChanged();
    partial void OnIDBirthplaceChanging(System.Nullable<int> value);
    partial void OnIDBirthplaceChanged();
    partial void OnIDJobChanging(System.Nullable<int> value);
    partial void OnIDJobChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnBuryDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBuryDayChanged();
    partial void OnIDBuryReasonChanging(System.Nullable<int> value);
    partial void OnIDBuryReasonChanged();
    partial void OnIDBuryPlaceChanging(System.Nullable<int> value);
    partial void OnIDBuryPlaceChanged();
    partial void OnIDFatherChanging(System.Nullable<int> value);
    partial void OnIDFatherChanged();
    partial void OnIDMotherChanging(System.Nullable<int> value);
    partial void OnIDMotherChanged();
    partial void OnIDHusbandChanging(System.Nullable<int> value);
    partial void OnIDHusbandChanged();
    partial void OnIDWifeChanging(System.Nullable<int> value);
    partial void OnIDWifeChanged();
    partial void OnGenLevelChanging(System.Nullable<int> value);
    partial void OnGenLevelChanged();
    #endregion
		
		public MEMBER()
		{
			this._RELATIONSHIPs = new EntitySet<RELATIONSHIP>(new Action<RELATIONSHIP>(this.attach_RELATIONSHIPs), new Action<RELATIONSHIP>(this.detach_RELATIONSHIPs));
			this._RELATIONSHIPs1 = new EntitySet<RELATIONSHIP>(new Action<RELATIONSHIP>(this.attach_RELATIONSHIPs1), new Action<RELATIONSHIP>(this.detach_RELATIONSHIPs1));
			this._BIRTHPLACE = default(EntityRef<BIRTHPLACE>);
			this._BURYPLACE = default(EntityRef<BURYPLACE>);
			this._BURYREASON = default(EntityRef<BURYREASON>);
			this._FAMILY = default(EntityRef<FAMILY>);
			this._JOB = default(EntityRef<JOB>);
			OnCreated();
		}
		
		[Column(Storage="_IDMember", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDMember
		{
			get
			{
				return this._IDMember;
			}
			set
			{
				if ((this._IDMember != value))
				{
					this.OnIDMemberChanging(value);
					this.SendPropertyChanging();
					this._IDMember = value;
					this.SendPropertyChanged("IDMember");
					this.OnIDMemberChanged();
				}
			}
		}
		
		[Column(Storage="_IDFamily", DbType="Int NOT NULL")]
		public int IDFamily
		{
			get
			{
				return this._IDFamily;
			}
			set
			{
				if ((this._IDFamily != value))
				{
					if (this._FAMILY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFamilyChanging(value);
					this.SendPropertyChanging();
					this._IDFamily = value;
					this.SendPropertyChanged("IDFamily");
					this.OnIDFamilyChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(30)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="TinyInt")]
		public System.Nullable<byte> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_IDBirthplace", DbType="Int")]
		public System.Nullable<int> IDBirthplace
		{
			get
			{
				return this._IDBirthplace;
			}
			set
			{
				if ((this._IDBirthplace != value))
				{
					if (this._BIRTHPLACE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBirthplaceChanging(value);
					this.SendPropertyChanging();
					this._IDBirthplace = value;
					this.SendPropertyChanged("IDBirthplace");
					this.OnIDBirthplaceChanged();
				}
			}
		}
		
		[Column(Storage="_IDJob", DbType="Int")]
		public System.Nullable<int> IDJob
		{
			get
			{
				return this._IDJob;
			}
			set
			{
				if ((this._IDJob != value))
				{
					if (this._JOB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDJobChanging(value);
					this.SendPropertyChanging();
					this._IDJob = value;
					this.SendPropertyChanged("IDJob");
					this.OnIDJobChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_BuryDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> BuryDay
		{
			get
			{
				return this._BuryDay;
			}
			set
			{
				if ((this._BuryDay != value))
				{
					this.OnBuryDayChanging(value);
					this.SendPropertyChanging();
					this._BuryDay = value;
					this.SendPropertyChanged("BuryDay");
					this.OnBuryDayChanged();
				}
			}
		}
		
		[Column(Storage="_IDBuryReason", DbType="Int")]
		public System.Nullable<int> IDBuryReason
		{
			get
			{
				return this._IDBuryReason;
			}
			set
			{
				if ((this._IDBuryReason != value))
				{
					if (this._BURYREASON.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBuryReasonChanging(value);
					this.SendPropertyChanging();
					this._IDBuryReason = value;
					this.SendPropertyChanged("IDBuryReason");
					this.OnIDBuryReasonChanged();
				}
			}
		}
		
		[Column(Storage="_IDBuryPlace", DbType="Int")]
		public System.Nullable<int> IDBuryPlace
		{
			get
			{
				return this._IDBuryPlace;
			}
			set
			{
				if ((this._IDBuryPlace != value))
				{
					if (this._BURYPLACE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBuryPlaceChanging(value);
					this.SendPropertyChanging();
					this._IDBuryPlace = value;
					this.SendPropertyChanged("IDBuryPlace");
					this.OnIDBuryPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_IDFather", DbType="Int")]
		public System.Nullable<int> IDFather
		{
			get
			{
				return this._IDFather;
			}
			set
			{
				if ((this._IDFather != value))
				{
					this.OnIDFatherChanging(value);
					this.SendPropertyChanging();
					this._IDFather = value;
					this.SendPropertyChanged("IDFather");
					this.OnIDFatherChanged();
				}
			}
		}
		
		[Column(Storage="_IDMother", DbType="Int")]
		public System.Nullable<int> IDMother
		{
			get
			{
				return this._IDMother;
			}
			set
			{
				if ((this._IDMother != value))
				{
					this.OnIDMotherChanging(value);
					this.SendPropertyChanging();
					this._IDMother = value;
					this.SendPropertyChanged("IDMother");
					this.OnIDMotherChanged();
				}
			}
		}
		
		[Column(Storage="_IDHusband", DbType="Int")]
		public System.Nullable<int> IDHusband
		{
			get
			{
				return this._IDHusband;
			}
			set
			{
				if ((this._IDHusband != value))
				{
					this.OnIDHusbandChanging(value);
					this.SendPropertyChanging();
					this._IDHusband = value;
					this.SendPropertyChanged("IDHusband");
					this.OnIDHusbandChanged();
				}
			}
		}
		
		[Column(Storage="_IDWife", DbType="Int")]
		public System.Nullable<int> IDWife
		{
			get
			{
				return this._IDWife;
			}
			set
			{
				if ((this._IDWife != value))
				{
					this.OnIDWifeChanging(value);
					this.SendPropertyChanging();
					this._IDWife = value;
					this.SendPropertyChanged("IDWife");
					this.OnIDWifeChanged();
				}
			}
		}
		
		[Column(Storage="_GenLevel", DbType="Int")]
		public System.Nullable<int> GenLevel
		{
			get
			{
				return this._GenLevel;
			}
			set
			{
				if ((this._GenLevel != value))
				{
					this.OnGenLevelChanging(value);
					this.SendPropertyChanging();
					this._GenLevel = value;
					this.SendPropertyChanged("GenLevel");
					this.OnGenLevelChanged();
				}
			}
		}
		
		[Association(Name="MEMBER_RELATIONSHIP", Storage="_RELATIONSHIPs", ThisKey="IDMember", OtherKey="IDMember1")]
		public EntitySet<RELATIONSHIP> RELATIONSHIPs
		{
			get
			{
				return this._RELATIONSHIPs;
			}
			set
			{
				this._RELATIONSHIPs.Assign(value);
			}
		}
		
		[Association(Name="MEMBER_RELATIONSHIP1", Storage="_RELATIONSHIPs1", ThisKey="IDMember", OtherKey="IDMember2")]
		public EntitySet<RELATIONSHIP> RELATIONSHIPs1
		{
			get
			{
				return this._RELATIONSHIPs1;
			}
			set
			{
				this._RELATIONSHIPs1.Assign(value);
			}
		}
		
		[Association(Name="BIRTHPLACE_MEMBER", Storage="_BIRTHPLACE", ThisKey="IDBirthplace", OtherKey="IDBirthPlace", IsForeignKey=true)]
		public BIRTHPLACE BIRTHPLACE
		{
			get
			{
				return this._BIRTHPLACE.Entity;
			}
			set
			{
				BIRTHPLACE previousValue = this._BIRTHPLACE.Entity;
				if (((previousValue != value) 
							|| (this._BIRTHPLACE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BIRTHPLACE.Entity = null;
						previousValue.MEMBERs.Remove(this);
					}
					this._BIRTHPLACE.Entity = value;
					if ((value != null))
					{
						value.MEMBERs.Add(this);
						this._IDBirthplace = value.IDBirthPlace;
					}
					else
					{
						this._IDBirthplace = default(Nullable<int>);
					}
					this.SendPropertyChanged("BIRTHPLACE");
				}
			}
		}
		
		[Association(Name="BURYPLACE_MEMBER", Storage="_BURYPLACE", ThisKey="IDBuryPlace", OtherKey="IDBuryPlace", IsForeignKey=true)]
		public BURYPLACE BURYPLACE
		{
			get
			{
				return this._BURYPLACE.Entity;
			}
			set
			{
				BURYPLACE previousValue = this._BURYPLACE.Entity;
				if (((previousValue != value) 
							|| (this._BURYPLACE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BURYPLACE.Entity = null;
						previousValue.MEMBERs.Remove(this);
					}
					this._BURYPLACE.Entity = value;
					if ((value != null))
					{
						value.MEMBERs.Add(this);
						this._IDBuryPlace = value.IDBuryPlace;
					}
					else
					{
						this._IDBuryPlace = default(Nullable<int>);
					}
					this.SendPropertyChanged("BURYPLACE");
				}
			}
		}
		
		[Association(Name="BURYREASON_MEMBER", Storage="_BURYREASON", ThisKey="IDBuryReason", OtherKey="IDBuryReason", IsForeignKey=true)]
		public BURYREASON BURYREASON
		{
			get
			{
				return this._BURYREASON.Entity;
			}
			set
			{
				BURYREASON previousValue = this._BURYREASON.Entity;
				if (((previousValue != value) 
							|| (this._BURYREASON.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BURYREASON.Entity = null;
						previousValue.MEMBERs.Remove(this);
					}
					this._BURYREASON.Entity = value;
					if ((value != null))
					{
						value.MEMBERs.Add(this);
						this._IDBuryReason = value.IDBuryReason;
					}
					else
					{
						this._IDBuryReason = default(Nullable<int>);
					}
					this.SendPropertyChanged("BURYREASON");
				}
			}
		}
		
		[Association(Name="FAMILY_MEMBER", Storage="_FAMILY", ThisKey="IDFamily", OtherKey="IDFamily", IsForeignKey=true)]
		public FAMILY FAMILY
		{
			get
			{
				return this._FAMILY.Entity;
			}
			set
			{
				FAMILY previousValue = this._FAMILY.Entity;
				if (((previousValue != value) 
							|| (this._FAMILY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FAMILY.Entity = null;
						previousValue.MEMBERs.Remove(this);
					}
					this._FAMILY.Entity = value;
					if ((value != null))
					{
						value.MEMBERs.Add(this);
						this._IDFamily = value.IDFamily;
					}
					else
					{
						this._IDFamily = default(int);
					}
					this.SendPropertyChanged("FAMILY");
				}
			}
		}
		
		[Association(Name="JOB_MEMBER", Storage="_JOB", ThisKey="IDJob", OtherKey="IDJob", IsForeignKey=true)]
		public JOB JOB
		{
			get
			{
				return this._JOB.Entity;
			}
			set
			{
				JOB previousValue = this._JOB.Entity;
				if (((previousValue != value) 
							|| (this._JOB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JOB.Entity = null;
						previousValue.MEMBERs.Remove(this);
					}
					this._JOB.Entity = value;
					if ((value != null))
					{
						value.MEMBERs.Add(this);
						this._IDJob = value.IDJob;
					}
					else
					{
						this._IDJob = default(Nullable<int>);
					}
					this.SendPropertyChanged("JOB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RELATIONSHIPs(RELATIONSHIP entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER = this;
		}
		
		private void detach_RELATIONSHIPs(RELATIONSHIP entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER = null;
		}
		
		private void attach_RELATIONSHIPs1(RELATIONSHIP entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER1 = this;
		}
		
		private void detach_RELATIONSHIPs1(RELATIONSHIP entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER1 = null;
		}
	}
	
	[Table(Name="dbo.MEMBER_EVENT")]
	public partial class MEMBER_EVENT
	{
		
		private int _IDMember;
		
		private int _IDAchievement;
		
		private System.Nullable<System.DateTime> _AchievementDate;
		
		public MEMBER_EVENT()
		{
		}
		
		[Column(Storage="_IDMember", DbType="Int NOT NULL")]
		public int IDMember
		{
			get
			{
				return this._IDMember;
			}
			set
			{
				if ((this._IDMember != value))
				{
					this._IDMember = value;
				}
			}
		}
		
		[Column(Storage="_IDAchievement", DbType="Int NOT NULL")]
		public int IDAchievement
		{
			get
			{
				return this._IDAchievement;
			}
			set
			{
				if ((this._IDAchievement != value))
				{
					this._IDAchievement = value;
				}
			}
		}
		
		[Column(Storage="_AchievementDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AchievementDate
		{
			get
			{
				return this._AchievementDate;
			}
			set
			{
				if ((this._AchievementDate != value))
				{
					this._AchievementDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.RELATIONSHIP_TYPE")]
	public partial class RELATIONSHIP_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRelationship;
		
		private string _Name;
		
		private EntitySet<RELATIONSHIP> _RELATIONSHIPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDRelationshipChanging(int value);
    partial void OnIDRelationshipChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RELATIONSHIP_TYPE()
		{
			this._RELATIONSHIPs = new EntitySet<RELATIONSHIP>(new Action<RELATIONSHIP>(this.attach_RELATIONSHIPs), new Action<RELATIONSHIP>(this.detach_RELATIONSHIPs));
			OnCreated();
		}
		
		[Column(Storage="_IDRelationship", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRelationship
		{
			get
			{
				return this._IDRelationship;
			}
			set
			{
				if ((this._IDRelationship != value))
				{
					this.OnIDRelationshipChanging(value);
					this.SendPropertyChanging();
					this._IDRelationship = value;
					this.SendPropertyChanged("IDRelationship");
					this.OnIDRelationshipChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="RELATIONSHIP_TYPE_RELATIONSHIP", Storage="_RELATIONSHIPs", ThisKey="IDRelationship", OtherKey="IDRelationship")]
		public EntitySet<RELATIONSHIP> RELATIONSHIPs
		{
			get
			{
				return this._RELATIONSHIPs;
			}
			set
			{
				this._RELATIONSHIPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RELATIONSHIPs(RELATIONSHIP entity)
		{
			this.SendPropertyChanging();
			entity.RELATIONSHIP_TYPE = this;
		}
		
		private void detach_RELATIONSHIPs(RELATIONSHIP entity)
		{
			this.SendPropertyChanging();
			entity.RELATIONSHIP_TYPE = null;
		}
	}
}
#pragma warning restore 1591
