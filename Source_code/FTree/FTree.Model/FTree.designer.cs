#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTree.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FTree")]
	public partial class FTreeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBIRTHPLACE(BIRTHPLACE instance);
    partial void UpdateBIRTHPLACE(BIRTHPLACE instance);
    partial void DeleteBIRTHPLACE(BIRTHPLACE instance);
    partial void InsertRELATIONSHIP_TYPE(RELATIONSHIP_TYPE instance);
    partial void UpdateRELATIONSHIP_TYPE(RELATIONSHIP_TYPE instance);
    partial void DeleteRELATIONSHIP_TYPE(RELATIONSHIP_TYPE instance);
    partial void InsertBURYPLACE(BURYPLACE instance);
    partial void UpdateBURYPLACE(BURYPLACE instance);
    partial void DeleteBURYPLACE(BURYPLACE instance);
    partial void InsertBURYREASON(BURYREASON instance);
    partial void UpdateBURYREASON(BURYREASON instance);
    partial void DeleteBURYREASON(BURYREASON instance);
    partial void InsertDEATH_INFO(DEATH_INFO instance);
    partial void UpdateDEATH_INFO(DEATH_INFO instance);
    partial void DeleteDEATH_INFO(DEATH_INFO instance);
    partial void InsertEVENT(EVENT instance);
    partial void UpdateEVENT(EVENT instance);
    partial void DeleteEVENT(EVENT instance);
    partial void InsertFAMILY(FAMILY instance);
    partial void UpdateFAMILY(FAMILY instance);
    partial void DeleteFAMILY(FAMILY instance);
    partial void InsertJOB(JOB instance);
    partial void UpdateJOB(JOB instance);
    partial void DeleteJOB(JOB instance);
    partial void InsertMEMBER(MEMBER instance);
    partial void UpdateMEMBER(MEMBER instance);
    partial void DeleteMEMBER(MEMBER instance);
    partial void InsertMEMBER_EVENT(MEMBER_EVENT instance);
    partial void UpdateMEMBER_EVENT(MEMBER_EVENT instance);
    partial void DeleteMEMBER_EVENT(MEMBER_EVENT instance);
    partial void InsertRELATIONSHIP(RELATIONSHIP instance);
    partial void UpdateRELATIONSHIP(RELATIONSHIP instance);
    partial void DeleteRELATIONSHIP(RELATIONSHIP instance);
    #endregion
		
		public FTreeDataContext() : 
				base(global::FTree.Model.Properties.Settings.Default.FTreeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FTreeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FTreeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FTreeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FTreeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BIRTHPLACE> BIRTHPLACEs
		{
			get
			{
				return this.GetTable<BIRTHPLACE>();
			}
		}
		
		public System.Data.Linq.Table<RELATIONSHIP_TYPE> RELATIONSHIP_TYPEs
		{
			get
			{
				return this.GetTable<RELATIONSHIP_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<BURYPLACE> BURYPLACEs
		{
			get
			{
				return this.GetTable<BURYPLACE>();
			}
		}
		
		public System.Data.Linq.Table<BURYREASON> BURYREASONs
		{
			get
			{
				return this.GetTable<BURYREASON>();
			}
		}
		
		public System.Data.Linq.Table<DEATH_INFO> DEATH_INFOs
		{
			get
			{
				return this.GetTable<DEATH_INFO>();
			}
		}
		
		public System.Data.Linq.Table<EVENT> EVENTs
		{
			get
			{
				return this.GetTable<EVENT>();
			}
		}
		
		public System.Data.Linq.Table<FAMILY> FAMILies
		{
			get
			{
				return this.GetTable<FAMILY>();
			}
		}
		
		public System.Data.Linq.Table<JOB> JOBs
		{
			get
			{
				return this.GetTable<JOB>();
			}
		}
		
		public System.Data.Linq.Table<MEMBER> MEMBERs
		{
			get
			{
				return this.GetTable<MEMBER>();
			}
		}
		
		public System.Data.Linq.Table<MEMBER_EVENT> MEMBER_EVENTs
		{
			get
			{
				return this.GetTable<MEMBER_EVENT>();
			}
		}
		
		public System.Data.Linq.Table<RELATIONSHIP> RELATIONSHIPs
		{
			get
			{
				return this.GetTable<RELATIONSHIP>();
			}
		}
	}
	
	[Table(Name="dbo.BIRTHPLACE")]
	public partial class BIRTHPLACE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBirthPlace;
		
		private string _Name;
		
		private EntitySet<MEMBER> _MEMBERs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBirthPlaceChanging(int value);
    partial void OnIDBirthPlaceChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BIRTHPLACE()
		{
			this._MEMBERs1 = new EntitySet<MEMBER>(new Action<MEMBER>(this.attach_MEMBERs1), new Action<MEMBER>(this.detach_MEMBERs1));
			OnCreated();
		}
		
		[Column(Storage="_IDBirthPlace", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDBirthPlace
		{
			get
			{
				return this._IDBirthPlace;
			}
			set
			{
				if ((this._IDBirthPlace != value))
				{
					this.OnIDBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._IDBirthPlace = value;
					this.SendPropertyChanged("IDBirthPlace");
					this.OnIDBirthPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="BIRTHPLACE_MEMBER", Storage="_MEMBERs1", ThisKey="IDBirthPlace", OtherKey="IDBirthPlace")]
		public EntitySet<MEMBER> MEMBERs1
		{
			get
			{
				return this._MEMBERs1;
			}
			set
			{
				this._MEMBERs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MEMBERs1(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.BIRTHPLACE1 = this;
		}
		
		private void detach_MEMBERs1(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.BIRTHPLACE1 = null;
		}
	}
	
	[Table(Name="dbo.RELATIONSHIP_TYPE")]
	public partial class RELATIONSHIP_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRelationship;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDRelationshipChanging(int value);
    partial void OnIDRelationshipChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RELATIONSHIP_TYPE()
		{
			OnCreated();
		}
		
		[Column(Storage="_IDRelationship", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRelationship
		{
			get
			{
				return this._IDRelationship;
			}
			set
			{
				if ((this._IDRelationship != value))
				{
					this.OnIDRelationshipChanging(value);
					this.SendPropertyChanging();
					this._IDRelationship = value;
					this.SendPropertyChanged("IDRelationship");
					this.OnIDRelationshipChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BURYPLACE")]
	public partial class BURYPLACE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBuryPlace;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBuryPlaceChanging(int value);
    partial void OnIDBuryPlaceChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BURYPLACE()
		{
			OnCreated();
		}
		
		[Column(Storage="_IDBuryPlace", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDBuryPlace
		{
			get
			{
				return this._IDBuryPlace;
			}
			set
			{
				if ((this._IDBuryPlace != value))
				{
					this.OnIDBuryPlaceChanging(value);
					this.SendPropertyChanging();
					this._IDBuryPlace = value;
					this.SendPropertyChanged("IDBuryPlace");
					this.OnIDBuryPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BURYREASON")]
	public partial class BURYREASON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBuryReason;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBuryReasonChanging(int value);
    partial void OnIDBuryReasonChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BURYREASON()
		{
			OnCreated();
		}
		
		[Column(Storage="_IDBuryReason", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDBuryReason
		{
			get
			{
				return this._IDBuryReason;
			}
			set
			{
				if ((this._IDBuryReason != value))
				{
					this.OnIDBuryReasonChanging(value);
					this.SendPropertyChanging();
					this._IDBuryReason = value;
					this.SendPropertyChanged("IDBuryReason");
					this.OnIDBuryReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DEATH_INFO")]
	public partial class DEATH_INFO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMember;
		
		private System.Nullable<int> _IDBuryPlace;
		
		private System.Nullable<int> _IDBuryReason;
		
		private System.Nullable<System.DateTime> _BuryDay;
		
		private EntityRef<MEMBER> _MEMBER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMemberChanging(int value);
    partial void OnIDMemberChanged();
    partial void OnIDBuryPlaceChanging(System.Nullable<int> value);
    partial void OnIDBuryPlaceChanged();
    partial void OnIDBuryReasonChanging(System.Nullable<int> value);
    partial void OnIDBuryReasonChanged();
    partial void OnBuryDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBuryDayChanged();
    #endregion
		
		public DEATH_INFO()
		{
			this._MEMBER = default(EntityRef<MEMBER>);
			OnCreated();
		}
		
		[Column(Storage="_IDMember", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDMember
		{
			get
			{
				return this._IDMember;
			}
			set
			{
				if ((this._IDMember != value))
				{
					if (this._MEMBER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMemberChanging(value);
					this.SendPropertyChanging();
					this._IDMember = value;
					this.SendPropertyChanged("IDMember");
					this.OnIDMemberChanged();
				}
			}
		}
		
		[Column(Storage="_IDBuryPlace", DbType="Int")]
		public System.Nullable<int> IDBuryPlace
		{
			get
			{
				return this._IDBuryPlace;
			}
			set
			{
				if ((this._IDBuryPlace != value))
				{
					this.OnIDBuryPlaceChanging(value);
					this.SendPropertyChanging();
					this._IDBuryPlace = value;
					this.SendPropertyChanged("IDBuryPlace");
					this.OnIDBuryPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_IDBuryReason", DbType="Int")]
		public System.Nullable<int> IDBuryReason
		{
			get
			{
				return this._IDBuryReason;
			}
			set
			{
				if ((this._IDBuryReason != value))
				{
					this.OnIDBuryReasonChanging(value);
					this.SendPropertyChanging();
					this._IDBuryReason = value;
					this.SendPropertyChanged("IDBuryReason");
					this.OnIDBuryReasonChanged();
				}
			}
		}
		
		[Column(Storage="_BuryDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> BuryDay
		{
			get
			{
				return this._BuryDay;
			}
			set
			{
				if ((this._BuryDay != value))
				{
					this.OnBuryDayChanging(value);
					this.SendPropertyChanging();
					this._BuryDay = value;
					this.SendPropertyChanged("BuryDay");
					this.OnBuryDayChanged();
				}
			}
		}
		
		[Association(Name="MEMBER_DEATH_INFO", Storage="_MEMBER", ThisKey="IDMember", OtherKey="IDMember", IsForeignKey=true)]
		public MEMBER MEMBER
		{
			get
			{
				return this._MEMBER.Entity;
			}
			set
			{
				MEMBER previousValue = this._MEMBER.Entity;
				if (((previousValue != value) 
							|| (this._MEMBER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEMBER.Entity = null;
						previousValue.DEATH_INFO = null;
					}
					this._MEMBER.Entity = value;
					if ((value != null))
					{
						value.DEATH_INFO = this;
						this._IDMember = value.IDMember;
					}
					else
					{
						this._IDMember = default(int);
					}
					this.SendPropertyChanged("MEMBER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EVENT")]
	public partial class EVENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDAchievement;
		
		private string _Name;
		
		private EntitySet<MEMBER_EVENT> _MEMBER_EVENTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAchievementChanging(int value);
    partial void OnIDAchievementChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EVENT()
		{
			this._MEMBER_EVENTs = new EntitySet<MEMBER_EVENT>(new Action<MEMBER_EVENT>(this.attach_MEMBER_EVENTs), new Action<MEMBER_EVENT>(this.detach_MEMBER_EVENTs));
			OnCreated();
		}
		
		[Column(Storage="_IDAchievement", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDAchievement
		{
			get
			{
				return this._IDAchievement;
			}
			set
			{
				if ((this._IDAchievement != value))
				{
					this.OnIDAchievementChanging(value);
					this.SendPropertyChanging();
					this._IDAchievement = value;
					this.SendPropertyChanged("IDAchievement");
					this.OnIDAchievementChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="EVENT_MEMBER_EVENT", Storage="_MEMBER_EVENTs", ThisKey="IDAchievement", OtherKey="IDAchievement")]
		public EntitySet<MEMBER_EVENT> MEMBER_EVENTs
		{
			get
			{
				return this._MEMBER_EVENTs;
			}
			set
			{
				this._MEMBER_EVENTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MEMBER_EVENTs(MEMBER_EVENT entity)
		{
			this.SendPropertyChanging();
			entity.EVENT = this;
		}
		
		private void detach_MEMBER_EVENTs(MEMBER_EVENT entity)
		{
			this.SendPropertyChanging();
			entity.EVENT = null;
		}
	}
	
	[Table(Name="dbo.FAMILY")]
	public partial class FAMILY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDFamily;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDFamilyChanging(int value);
    partial void OnIDFamilyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FAMILY()
		{
			OnCreated();
		}
		
		[Column(Storage="_IDFamily", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDFamily
		{
			get
			{
				return this._IDFamily;
			}
			set
			{
				if ((this._IDFamily != value))
				{
					this.OnIDFamilyChanging(value);
					this.SendPropertyChanging();
					this._IDFamily = value;
					this.SendPropertyChanged("IDFamily");
					this.OnIDFamilyChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.JOB")]
	public partial class JOB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDJob;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDJobChanging(int value);
    partial void OnIDJobChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public JOB()
		{
			OnCreated();
		}
		
		[Column(Storage="_IDJob", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDJob
		{
			get
			{
				return this._IDJob;
			}
			set
			{
				if ((this._IDJob != value))
				{
					this.OnIDJobChanging(value);
					this.SendPropertyChanging();
					this._IDJob = value;
					this.SendPropertyChanged("IDJob");
					this.OnIDJobChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MEMBER")]
	public partial class MEMBER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMember;
		
		private int _IDFamily;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<byte> _Gender;
		
		private System.Nullable<int> _IDBirthPlace;
		
		private System.Nullable<int> _IDJob;
		
		private string _Address;
		
		private System.Nullable<int> _GenLevel;
		
		private System.Nullable<System.DateTime> _DayJointFamily;
		
		private EntityRef<DEATH_INFO> _DEATH_INFO;
		
		private EntitySet<RELATIONSHIP> _RELATIONSHIPs1;
		
		private EntityRef<BIRTHPLACE> _BIRTHPLACE1;
		
		private EntityRef<RELATIONSHIP> _RELATIONSHIP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMemberChanging(int value);
    partial void OnIDMemberChanged();
    partial void OnIDFamilyChanging(int value);
    partial void OnIDFamilyChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnGenderChanging(System.Nullable<byte> value);
    partial void OnGenderChanged();
    partial void OnIDBirthPlaceChanging(System.Nullable<int> value);
    partial void OnIDBirthPlaceChanged();
    partial void OnIDJobChanging(System.Nullable<int> value);
    partial void OnIDJobChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnGenLevelChanging(System.Nullable<int> value);
    partial void OnGenLevelChanged();
    partial void OnDayJointFamilyChanging(System.Nullable<System.DateTime> value);
    partial void OnDayJointFamilyChanged();
    #endregion
		
		public MEMBER()
		{
			this._DEATH_INFO = default(EntityRef<DEATH_INFO>);
			this._RELATIONSHIPs1 = new EntitySet<RELATIONSHIP>(new Action<RELATIONSHIP>(this.attach_RELATIONSHIPs1), new Action<RELATIONSHIP>(this.detach_RELATIONSHIPs1));
			this._BIRTHPLACE1 = default(EntityRef<BIRTHPLACE>);
			this._RELATIONSHIP = default(EntityRef<RELATIONSHIP>);
			OnCreated();
		}
		
		[Column(Storage="_IDMember", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDMember
		{
			get
			{
				return this._IDMember;
			}
			set
			{
				if ((this._IDMember != value))
				{
					if (this._RELATIONSHIP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMemberChanging(value);
					this.SendPropertyChanging();
					this._IDMember = value;
					this.SendPropertyChanged("IDMember");
					this.OnIDMemberChanged();
				}
			}
		}
		
		[Column(Storage="_IDFamily", DbType="Int NOT NULL")]
		public int IDFamily
		{
			get
			{
				return this._IDFamily;
			}
			set
			{
				if ((this._IDFamily != value))
				{
					this.OnIDFamilyChanging(value);
					this.SendPropertyChanging();
					this._IDFamily = value;
					this.SendPropertyChanged("IDFamily");
					this.OnIDFamilyChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="TinyInt")]
		public System.Nullable<byte> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_IDBirthPlace", DbType="Int")]
		public System.Nullable<int> IDBirthPlace
		{
			get
			{
				return this._IDBirthPlace;
			}
			set
			{
				if ((this._IDBirthPlace != value))
				{
					if (this._BIRTHPLACE1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._IDBirthPlace = value;
					this.SendPropertyChanged("IDBirthPlace");
					this.OnIDBirthPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_IDJob", DbType="Int")]
		public System.Nullable<int> IDJob
		{
			get
			{
				return this._IDJob;
			}
			set
			{
				if ((this._IDJob != value))
				{
					this.OnIDJobChanging(value);
					this.SendPropertyChanging();
					this._IDJob = value;
					this.SendPropertyChanged("IDJob");
					this.OnIDJobChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_GenLevel", DbType="Int")]
		public System.Nullable<int> GenLevel
		{
			get
			{
				return this._GenLevel;
			}
			set
			{
				if ((this._GenLevel != value))
				{
					this.OnGenLevelChanging(value);
					this.SendPropertyChanging();
					this._GenLevel = value;
					this.SendPropertyChanged("GenLevel");
					this.OnGenLevelChanged();
				}
			}
		}
		
		[Column(Storage="_DayJointFamily", DbType="DateTime")]
		public System.Nullable<System.DateTime> DayJointFamily
		{
			get
			{
				return this._DayJointFamily;
			}
			set
			{
				if ((this._DayJointFamily != value))
				{
					this.OnDayJointFamilyChanging(value);
					this.SendPropertyChanging();
					this._DayJointFamily = value;
					this.SendPropertyChanged("DayJointFamily");
					this.OnDayJointFamilyChanged();
				}
			}
		}
		
		[Association(Name="MEMBER_DEATH_INFO", Storage="_DEATH_INFO", ThisKey="IDMember", OtherKey="IDMember", IsUnique=true, IsForeignKey=false)]
		public DEATH_INFO DEATH_INFO
		{
			get
			{
				return this._DEATH_INFO.Entity;
			}
			set
			{
				DEATH_INFO previousValue = this._DEATH_INFO.Entity;
				if (((previousValue != value) 
							|| (this._DEATH_INFO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DEATH_INFO.Entity = null;
						previousValue.MEMBER = null;
					}
					this._DEATH_INFO.Entity = value;
					if ((value != null))
					{
						value.MEMBER = this;
					}
					this.SendPropertyChanged("DEATH_INFO");
				}
			}
		}
		
		[Association(Name="MEMBER_RELATIONSHIP1", Storage="_RELATIONSHIPs1", ThisKey="IDMember", OtherKey="IDMember1")]
		public EntitySet<RELATIONSHIP> RELATIONSHIPs1
		{
			get
			{
				return this._RELATIONSHIPs1;
			}
			set
			{
				this._RELATIONSHIPs1.Assign(value);
			}
		}
		
		[Association(Name="BIRTHPLACE_MEMBER", Storage="_BIRTHPLACE1", ThisKey="IDBirthPlace", OtherKey="IDBirthPlace", IsForeignKey=true)]
		public BIRTHPLACE BIRTHPLACE1
		{
			get
			{
				return this._BIRTHPLACE1.Entity;
			}
			set
			{
				BIRTHPLACE previousValue = this._BIRTHPLACE1.Entity;
				if (((previousValue != value) 
							|| (this._BIRTHPLACE1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BIRTHPLACE1.Entity = null;
						previousValue.MEMBERs1.Remove(this);
					}
					this._BIRTHPLACE1.Entity = value;
					if ((value != null))
					{
						value.MEMBERs1.Add(this);
						this._IDBirthPlace = value.IDBirthPlace;
					}
					else
					{
						this._IDBirthPlace = default(Nullable<int>);
					}
					this.SendPropertyChanged("BIRTHPLACE1");
				}
			}
		}
		
		[Association(Name="RELATIONSHIP_MEMBER", Storage="_RELATIONSHIP", ThisKey="IDMember", OtherKey="IDMember1", IsForeignKey=true)]
		public RELATIONSHIP RELATIONSHIP
		{
			get
			{
				return this._RELATIONSHIP.Entity;
			}
			set
			{
				RELATIONSHIP previousValue = this._RELATIONSHIP.Entity;
				if (((previousValue != value) 
							|| (this._RELATIONSHIP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RELATIONSHIP.Entity = null;
						previousValue.MEMBERs.Remove(this);
					}
					this._RELATIONSHIP.Entity = value;
					if ((value != null))
					{
						value.MEMBERs.Add(this);
						this._IDMember = value.IDMember1;
					}
					else
					{
						this._IDMember = default(int);
					}
					this.SendPropertyChanged("RELATIONSHIP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RELATIONSHIPs1(RELATIONSHIP entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER1 = this;
		}
		
		private void detach_RELATIONSHIPs1(RELATIONSHIP entity)
		{
			this.SendPropertyChanging();
			entity.MEMBER1 = null;
		}
	}
	
	[Table(Name="dbo.MEMBER_EVENT")]
	public partial class MEMBER_EVENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDAchievementMember;
		
		private int _IDMember;
		
		private int _IDAchievement;
		
		private System.Nullable<System.DateTime> _AchievementDate;
		
		private string _Description;
		
		private EntityRef<EVENT> _EVENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAchievementMemberChanging(int value);
    partial void OnIDAchievementMemberChanged();
    partial void OnIDMemberChanging(int value);
    partial void OnIDMemberChanged();
    partial void OnIDAchievementChanging(int value);
    partial void OnIDAchievementChanged();
    partial void OnAchievementDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAchievementDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MEMBER_EVENT()
		{
			this._EVENT = default(EntityRef<EVENT>);
			OnCreated();
		}
		
		[Column(Storage="_IDAchievementMember", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDAchievementMember
		{
			get
			{
				return this._IDAchievementMember;
			}
			set
			{
				if ((this._IDAchievementMember != value))
				{
					this.OnIDAchievementMemberChanging(value);
					this.SendPropertyChanging();
					this._IDAchievementMember = value;
					this.SendPropertyChanged("IDAchievementMember");
					this.OnIDAchievementMemberChanged();
				}
			}
		}
		
		[Column(Storage="_IDMember", DbType="Int NOT NULL")]
		public int IDMember
		{
			get
			{
				return this._IDMember;
			}
			set
			{
				if ((this._IDMember != value))
				{
					this.OnIDMemberChanging(value);
					this.SendPropertyChanging();
					this._IDMember = value;
					this.SendPropertyChanged("IDMember");
					this.OnIDMemberChanged();
				}
			}
		}
		
		[Column(Storage="_IDAchievement", DbType="Int NOT NULL")]
		public int IDAchievement
		{
			get
			{
				return this._IDAchievement;
			}
			set
			{
				if ((this._IDAchievement != value))
				{
					if (this._EVENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAchievementChanging(value);
					this.SendPropertyChanging();
					this._IDAchievement = value;
					this.SendPropertyChanged("IDAchievement");
					this.OnIDAchievementChanged();
				}
			}
		}
		
		[Column(Storage="_AchievementDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AchievementDate
		{
			get
			{
				return this._AchievementDate;
			}
			set
			{
				if ((this._AchievementDate != value))
				{
					this.OnAchievementDateChanging(value);
					this.SendPropertyChanging();
					this._AchievementDate = value;
					this.SendPropertyChanged("AchievementDate");
					this.OnAchievementDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="EVENT_MEMBER_EVENT", Storage="_EVENT", ThisKey="IDAchievement", OtherKey="IDAchievement", IsForeignKey=true)]
		public EVENT EVENT
		{
			get
			{
				return this._EVENT.Entity;
			}
			set
			{
				EVENT previousValue = this._EVENT.Entity;
				if (((previousValue != value) 
							|| (this._EVENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EVENT.Entity = null;
						previousValue.MEMBER_EVENTs.Remove(this);
					}
					this._EVENT.Entity = value;
					if ((value != null))
					{
						value.MEMBER_EVENTs.Add(this);
						this._IDAchievement = value.IDAchievement;
					}
					else
					{
						this._IDAchievement = default(int);
					}
					this.SendPropertyChanged("EVENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RELATIONSHIP")]
	public partial class RELATIONSHIP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMember1;
		
		private int _IDMember2;
		
		private int _IDRelationship;
		
		private System.Nullable<System.DateTime> _MarriedDay;
		
		private EntitySet<MEMBER> _MEMBERs;
		
		private EntityRef<MEMBER> _MEMBER1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMember1Changing(int value);
    partial void OnIDMember1Changed();
    partial void OnIDMember2Changing(int value);
    partial void OnIDMember2Changed();
    partial void OnIDRelationshipChanging(int value);
    partial void OnIDRelationshipChanged();
    partial void OnMarriedDayChanging(System.Nullable<System.DateTime> value);
    partial void OnMarriedDayChanged();
    #endregion
		
		public RELATIONSHIP()
		{
			this._MEMBERs = new EntitySet<MEMBER>(new Action<MEMBER>(this.attach_MEMBERs), new Action<MEMBER>(this.detach_MEMBERs));
			this._MEMBER1 = default(EntityRef<MEMBER>);
			OnCreated();
		}
		
		[Column(Storage="_IDMember1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDMember1
		{
			get
			{
				return this._IDMember1;
			}
			set
			{
				if ((this._IDMember1 != value))
				{
					if (this._MEMBER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMember1Changing(value);
					this.SendPropertyChanging();
					this._IDMember1 = value;
					this.SendPropertyChanged("IDMember1");
					this.OnIDMember1Changed();
				}
			}
		}
		
		[Column(Storage="_IDMember2", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDMember2
		{
			get
			{
				return this._IDMember2;
			}
			set
			{
				if ((this._IDMember2 != value))
				{
					this.OnIDMember2Changing(value);
					this.SendPropertyChanging();
					this._IDMember2 = value;
					this.SendPropertyChanged("IDMember2");
					this.OnIDMember2Changed();
				}
			}
		}
		
		[Column(Storage="_IDRelationship", DbType="Int NOT NULL")]
		public int IDRelationship
		{
			get
			{
				return this._IDRelationship;
			}
			set
			{
				if ((this._IDRelationship != value))
				{
					this.OnIDRelationshipChanging(value);
					this.SendPropertyChanging();
					this._IDRelationship = value;
					this.SendPropertyChanged("IDRelationship");
					this.OnIDRelationshipChanged();
				}
			}
		}
		
		[Column(Storage="_MarriedDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> MarriedDay
		{
			get
			{
				return this._MarriedDay;
			}
			set
			{
				if ((this._MarriedDay != value))
				{
					this.OnMarriedDayChanging(value);
					this.SendPropertyChanging();
					this._MarriedDay = value;
					this.SendPropertyChanged("MarriedDay");
					this.OnMarriedDayChanged();
				}
			}
		}
		
		[Association(Name="RELATIONSHIP_MEMBER", Storage="_MEMBERs", ThisKey="IDMember1", OtherKey="IDMember")]
		public EntitySet<MEMBER> MEMBERs
		{
			get
			{
				return this._MEMBERs;
			}
			set
			{
				this._MEMBERs.Assign(value);
			}
		}
		
		[Association(Name="MEMBER_RELATIONSHIP1", Storage="_MEMBER1", ThisKey="IDMember1", OtherKey="IDMember", IsForeignKey=true)]
		public MEMBER MEMBER1
		{
			get
			{
				return this._MEMBER1.Entity;
			}
			set
			{
				MEMBER previousValue = this._MEMBER1.Entity;
				if (((previousValue != value) 
							|| (this._MEMBER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEMBER1.Entity = null;
						previousValue.RELATIONSHIPs1.Remove(this);
					}
					this._MEMBER1.Entity = value;
					if ((value != null))
					{
						value.RELATIONSHIPs1.Add(this);
						this._IDMember1 = value.IDMember;
					}
					else
					{
						this._IDMember1 = default(int);
					}
					this.SendPropertyChanged("MEMBER1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.RELATIONSHIP = this;
		}
		
		private void detach_MEMBERs(MEMBER entity)
		{
			this.SendPropertyChanging();
			entity.RELATIONSHIP = null;
		}
	}
}
#pragma warning restore 1591
